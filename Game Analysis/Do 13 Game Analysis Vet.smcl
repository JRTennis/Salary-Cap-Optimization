{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Game Analysis/Do 13 Game Analysis Vet.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}24 Aug 2025, 13:58:47
{txt}
{com}. clear all
{res}{txt}
{com}. scalar t1 = c(current_time)
{txt}
{com}. use "C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Game Analysis/Data 24 Final Dataset Vet.dta"
{txt}
{com}. 
. foreach x in Rate ANYA TANYA FPA {c -(}
{txt}  2{com}.         foreach y in Game Season {c -(}
{txt}  3{com}.                 * Logit Regressions with Game and Season Variables
.                 quietly logit Win Diff`y'`x' DiffNonQBFantPt DiffHome DiffRestDays DifflogIM DiffSGini DiffSNSRatio DiffFE*, vce(cluster GameID)
{txt}  4{com}.                 * Generate Matrices for Coefs, Variances, and PseudoR2s
.                 quietly matrix `y'Coef`x' = e(b)
{txt}  5{com}.                 quietly matrix `y'Coef`x' = `y'Coef`x'[1,1..7]
{txt}  6{com}.                 quietly matrix `y'CoefV`x' = e(V)
{txt}  7{com}.                 quietly scalar `y'PseudoR2`x' = e(r2_p)
{txt}  8{com}.                 
.                 * Generate Marginal Effects
.                 quietly predict `y'xb`x', xb
{txt}  9{com}.                 quietly gen `y'Predict`x' = exp(`y'xb`x')/(exp(`y'xb`x')+1)
{txt} 10{com}.                 quietly gen `y'ME`x' = `y'Predict`x'*(1-`y'Predict`x')*`y'Coef`x'[1,1]
{txt} 11{com}.                 
.                 * Generate Variables and Matrices for AMEs and AME Variances
.                 quietly margins, dydx(Diff`y'`x' DiffNonQBFantPt DiffHome DiffRestDays DifflogIM DiffSGini DiffSNSRatio) post
{txt} 12{com}.                 quietly matrix `y'AME`x' = e(b)
{txt} 13{com}.                 quietly gen `y'AME`x' = `y'AME`x'[1,1]
{txt} 14{com}.                 quietly matrix `y'AMEV`x' = e(V)
{txt} 15{com}.                 
.                 * Calculate Logit Standard Errors
.                 quietly matrix `y'CoefVDiag`x' = vecdiag(`y'CoefV`x')
{txt} 16{com}.                 quietly local NColsCoef = colsof(`y'CoefVDiag`x')
{txt} 17{com}.                 quietly matrix `y'CoefSE`x' = J(1,`NColsCoef',.)
{txt} 18{com}.                 forvalues i = 1/`NColsCoef' {c -(}
{txt} 19{com}.                         quietly matrix `y'CoefSE`x'[1,`i'] = sqrt(`y'CoefVDiag`x'[1,`i'])
{txt} 20{com}.                 {c )-}
{txt} 21{com}.                 quietly matrix `y'CoefSE`x' = `y'CoefSE`x'[1,1..7]
{txt} 22{com}.                 
.                 * Calculate Logit AME Standard Errors
.                 quietly matrix `y'AMEVDiag`x' = vecdiag(`y'AMEV`x')
{txt} 23{com}.                 quietly local NColsAME = colsof(`y'AMEVDiag`x')
{txt} 24{com}.                 quietly matrix `y'AMESE`x' = J(1,`NColsAME',.)
{txt} 25{com}.                 forvalues i = 1/`NColsAME' {c -(}
{txt} 26{com}.                         quietly matrix `y'AMESE`x'[1,`i'] = sqrt(`y'AMEVDiag`x'[1,`i'])
{txt} 27{com}.                 {c )-}
{txt} 28{com}.                 quietly gen `y'AMESE`x' = `y'AMESE`x'[1,1]
{txt} 29{com}.                 
.                 * Linear Regressions with Game and Season Variables
.                 quietly reg Win Diff`y'`x' DiffNonQBFantPt DiffHome DiffRestDays DifflogIM DiffSGini DiffSNSRatio DiffFE*, vce(cluster GameID)
{txt} 30{com}.                 * Generate Matrices for Coefs, Variances, and R2s
.                 quietly matrix `y'Lin`x' = e(b)
{txt} 31{com}.                 quietly matrix `y'Lin`x' = `y'Lin`x'[1,1..7]
{txt} 32{com}.                 quietly matrix `y'LinV`x' = e(V)
{txt} 33{com}.                 quietly scalar `y'R2`x' = e(r2)
{txt} 34{com}.                 
.                 * Calculate Linear Standard Errors
.                 quietly matrix `y'LinVDiag`x' = vecdiag(`y'LinV`x')
{txt} 35{com}.                 quietly local NColsLin = colsof(`y'LinVDiag`x')
{txt} 36{com}.                 quietly matrix `y'LinSE`x' = J(1,`NColsLin',.)
{txt} 37{com}.                 forvalues i = 1/`NColsLin' {c -(}
{txt} 38{com}.                         quietly matrix `y'LinSE`x'[1,`i'] = sqrt(`y'LinVDiag`x'[1,`i'])
{txt} 39{com}.                 {c )-}
{txt} 40{com}.                 quietly matrix `y'LinSE`x' = `y'LinSE`x'[1,1..7]
{txt} 41{com}.         {c )-}
{txt} 42{com}.         
.         * Instrumental Variables
.         foreach z in "" "NoQ4" {c -(}
{txt} 43{com}.                 quietly ivregress 2sls Win (DiffGame`x' = DiffSeason`x'`z') DiffNonQBFantPt DiffHome DiffRestDays DifflogIM DiffSGini DiffSNSRatio DiffFE*, vce(cluster GameID)
{txt} 44{com}.                 * Generate Matrices for Coefs, Variances, and R2s
.                 quietly matrix IVLin`x'`z' = e(b)
{txt} 45{com}.                 quietly matrix IVLin`x'`z' = IVLin`x'`z'[1,1..7]
{txt} 46{com}.                 quietly matrix IVLinV`x'`z' = e(V)
{txt} 47{com}.                 quietly scalar IVR2`x'`z' = e(r2)
{txt} 48{com}.                 
.                 * Calculate IV Standard Errors
.                 quietly matrix IVLinVDiag`x'`z' = vecdiag(IVLinV`x'`z')
{txt} 49{com}.                 quietly local NColsIV = colsof(IVLinVDiag`x'`z')
{txt} 50{com}.                 quietly matrix IVLinSE`x'`z' = J(1,`NColsIV',.)
{txt} 51{com}.                 forvalues i = 1/`NColsIV' {c -(}
{txt} 52{com}.                         quietly matrix IVLinSE`x'`z'[1,`i'] = sqrt(IVLinVDiag`x'`z'[1,`i'])
{txt} 53{com}.                 {c )-}
{txt} 54{com}.                 quietly matrix IVLinSE`x'`z' = IVLinSE`x'`z'[1,1..7]
{txt} 55{com}.                 
.                 /* * First-Stage F Statistics
>                 quietly estat firststage
>                 quietly scalar IVF`x'`z' = r(singleresults)[1,4]
>                 disp "`x'`z' F = " IVF`x'`z'
>                 quietly scalar IVFp`x'`z' = r(singleresults)[1,7]
>                 disp "`x'`z' p = " IVFp`x'`z' */
.         {c )-}
{txt} 56{com}. {c )-}
{txt}
{com}. 
. * Make Tables
. foreach x in Rate ANYA TANYA FPA {c -(}
{txt}  2{com}.         matrix Table`x' = J(15,8,.)
{txt}  3{com}.         forvalues i = 1/7 {c -(}
{txt}  4{com}.                 quietly matrix Table`x'[2*`i'-1,1] = GameCoef`x'[1,`i']
{txt}  5{com}.                 quietly matrix Table`x'[2*`i',1] = GameCoefSE`x'[1,`i']
{txt}  6{com}.                 quietly matrix Table`x'[2*`i'-1,2] = GameAME`x'[1,`i']
{txt}  7{com}.                 quietly matrix Table`x'[2*`i',2] = GameAMESE`x'[1,`i']
{txt}  8{com}.                 quietly matrix Table`x'[2*`i'-1,3] = GameLin`x'[1,`i']
{txt}  9{com}.                 quietly matrix Table`x'[2*`i',3] = GameLinSE`x'[1,`i']
{txt} 10{com}.                 
.                 quietly matrix Table`x'[2*`i'-1,4] = SeasonCoef`x'[1,`i']
{txt} 11{com}.                 quietly matrix Table`x'[2*`i',4] = SeasonCoefSE`x'[1,`i']
{txt} 12{com}.                 quietly matrix Table`x'[2*`i'-1,5] = SeasonAME`x'[1,`i']
{txt} 13{com}.                 quietly matrix Table`x'[2*`i',5] = SeasonAMESE`x'[1,`i']
{txt} 14{com}.                 quietly matrix Table`x'[2*`i'-1,6] = SeasonLin`x'[1,`i']
{txt} 15{com}.                 quietly matrix Table`x'[2*`i',6] = SeasonLinSE`x'[1,`i']
{txt} 16{com}.                 
.                 quietly matrix Table`x'[2*`i'-1,7] = IVLin`x'[1,`i']
{txt} 17{com}.                 quietly matrix Table`x'[2*`i',7] = IVLinSE`x'[1,`i']
{txt} 18{com}.                 quietly matrix Table`x'[2*`i'-1,8] = IVLin`x'NoQ4[1,`i']
{txt} 19{com}.                 quietly matrix Table`x'[2*`i',8] = IVLinSE`x'NoQ4[1,`i']
{txt} 20{com}.         {c )-}
{txt} 21{com}.         quietly matrix Table`x'[15,1] = GamePseudoR2`x'
{txt} 22{com}.         quietly matrix Table`x'[15,3] = GameR2`x'
{txt} 23{com}.         quietly matrix Table`x'[15,4] = SeasonPseudoR2`x'
{txt} 24{com}.         quietly matrix Table`x'[15,6] = SeasonR2`x'
{txt} 25{com}.         quietly matrix Table`x'[15,7] = IVR2`x'
{txt} 26{com}.         quietly matrix Table`x'[15,8] = IVR2`x'NoQ4
{txt} 27{com}. {c )-}
{txt}
{com}. matrix list TableRate
{res}
{txt}TableRate[15,8]
             c1          c2          c3          c4          c5          c6          c7          c8
 r1 {res}  .06084621   .00460493   .00487602   .03304691   .00322615   .00361183   .00883868   .00807256
{txt} r2 {res}  .00433637   .00025976   .00027095   .01035781   .00100902    .0008205   .00190713   .00234728
{txt} r3 {res}  .11900573   .00900654   .00706123   .14182756   .01384568   .01214792   .00268642   .00353223
{txt} r4 {res}  .00749422   .00044834   .00045164   .00667394   .00036386   .00032903   .00213971   .00262174
{txt} r5 {res}  .20653797   .01563111    .0107816   .16833129   .01643307   .01340605   .00935124   .00962778
{txt} r6 {res}   .0792935   .00598289   .00649182   .06404625   .00622734    .0068802   .00654247   .00649427
{txt} r7 {res}  .03006631   .00227546   .00106482   .01438486    .0014043   .00086187   .00122449   .00119362
{txt} r8 {res}  .03555824    .0026914   .00286433   .02824534   .00275446   .00299472   .00285778   .00282268
{txt} r9 {res} -.02122744  -.00160652  -.00178867   .02678426   .00261477  -.00179256  -.00359657  -.00324703
{txt}r10 {res}   .1590821   .01203679   .01256183   .12367899   .01207194   .01313458   .01285898   .01266137
{txt}r11 {res}  4.0246141   .30458897   .24067561   3.6817582    .3594256   .28336538    .2015067   .20907947
{txt}r12 {res}  2.0859108   .15786334   .18252321   1.8831488   .18424281   .19351236   .18209367   .18074581
{txt}r13 {res}  .25145455   .01903047   .01812444   .16717368   .01632006   .00993543   .02226888   .02146761
{txt}r14 {res}  .28289052   .02145155   .02337923   .23563182   .02302985   .02478047   .02350319   .02316619
{txt}r15 {res}   .6503563           .   .56962623   .55572748           .   .51665451   .53266766   .54557705
{reset}
{com}. matrix list TableANYA
{res}
{txt}TableANYA[15,8]
             c1          c2          c3          c4          c5          c6          c7          c8
 r1 {res}   .6214641   .04726812   .04424008    .3029587   .02960263   .03213791   .08778815   .07467825
{txt} r2 {res}  .04333666   .00265663   .00252427   .09459497   .00923549   .00795788   .02157569    .0258513
{txt} r3 {res}   .1146271   .00871846   .00689171   .14194385   .01386958   .01213812   .00142586   .00307132
{txt} r4 {res}  .00777666   .00047174   .00045628    .0067157   .00036853   .00033156   .00274722   .00327315
{txt} r5 {res}  .20181568   .01534996   .01175612   .16757703   .01637425   .01358819    .0109829   .01121567
{txt} r6 {res}  .07820453   .00592615   .00652628   .06390255    .0062198   .00688638   .00663708   .00647344
{txt} r7 {res}  .00374527   .00028486   .00022266   .01482177   .00144826   .00087128  -.00041293  -.00022159
{txt} r8 {res}  .03473946   .00264244   .00286479   .02816967   .00274942   .00299595   .00289435   .00284452
{txt} r9 {res} -.11978648  -.00911087  -.00367408   .01718742   .00167941  -.00213626   -.0077198  -.00650186
{txt}r10 {res}  .15624653   .01187254   .01256813   .12297237   .01201421    .0131481   .01311946   .01280412
{txt}r11 {res}  3.9075076   .29720224    .2901437   3.6779181   .35937583   .29233821   .29139484   .29101819
{txt}r12 {res}  2.0514111   .15568561   .18471356   1.8913148   .18520998   .19428162   .18525987   .18100089
{txt}r13 {res}  .04196747   .00319202   .01214449    .1394163   .01362261   .00856517   .01127801   .01153886
{txt}r14 {res}  .27057992   .02058301   .02356141   .23360253   .02284569   .02482305   .02399071    .0233243
{txt}r15 {res}  .65074679           .   .56463048   .55547245           .   .51621763   .51524869   .54050555
{reset}
{com}. matrix list TableTANYA
{res}
{txt}TableTANYA[15,8]
             c1          c2          c3          c4          c5          c6          c7          c8
 r1 {res}  .67957555   .05218228   .04458725   .32483982   .03171523   .03684157   .10580905   .09852766
{txt} r2 {res}  .04635355   .00292827   .00271058   .09883854   .00958802   .00802878   .02424386   .02877289
{txt} r3 {res}  .12158349   .00933598   .00751063   .14246567   .01390941   .01218585   .00073617   .00154189
{txt} r4 {res}  .00762656   .00044636   .00045266   .00669463   .00036351   .00032714   .00271655   .00321022
{txt} r5 {res}  .14707171   .01129313   .00967325   .16959174   .01655782   .01384993   .00573474   .00620317
{txt} r6 {res}  .07723653   .00591719   .00657663    .0638442   .00620996   .00688506   .00706444   .00704098
{txt} r7 {res} -.00471713  -.00036221   .00018177   .01532194   .00149593   .00092088  -.00076096  -.00064884
{txt} r8 {res}  .03377968   .00259384   .00285924   .02821965   .00275181   .00299253   .00295349   .00292375
{txt} r9 {res} -.09509481    -.007302  -.00255299   .01543635    .0015071  -.00291789  -.00665701   -.0061689
{txt}r10 {res}  .14831711   .01138266   .01255371   .12309825   .01201709   .01313937   .01340971   .01319892
{txt}r11 {res}  2.9883571    .2294657   .26739643   3.6202056   .35345308   .28364214   .23790783   .24141505
{txt}r12 {res}  2.0675192   .15854364   .18596562   1.8857535   .18446974   .19351928   .19283987    .1899152
{txt}r13 {res}  .05464788   .00419622   .01100454   .13074156   .01276475   .00607306   .00823065   .00856056
{txt}r14 {res}  .27114104   .02082311   .02376159   .23523516   .02298558   .02480645   .02512952   .02465293
{txt}r15 {res}  .64787901           .   .55757845     .555732           .   .51686545   .47478983    .4933116
{reset}
{com}. matrix list TableFPA
{res}
{txt}TableFPA[15,8]
             c1          c2          c3          c4          c5          c6          c7          c8
 r1 {res}  7.9936198   .60031666   .48536687   4.9405582   .48104894   .53268076    1.053311   .96303839
{txt} r2 {res}  .54957815   .03294821   .03017865   1.2773809   .12299444   .10715171   .21542134   .25243729
{txt} r3 {res}  .15094784    .0113361   .00915354   .14323549   .01394646   .01225302   .00530277   .00591484
{txt} r4 {res}  .00781051   .00038743    .0003914   .00669388   .00035892   .00032396   .00151793   .00175205
{txt} r5 {res}  .11024414   .00827928   .00664115   .17412357   .01695395   .01367304  -.00026321   .00083421
{txt} r6 {res}  .07787841   .00583391   .00657786    .0639838   .00620372   .00687676   .00721309   .00735364
{txt} r7 {res}  .00327595   .00024602   .00062571   .01518333   .00147836    .0008271    .0003418   .00038692
{txt} r8 {res}  .03468752   .00260515   .00288889   .02835803   .00275794   .00299116   .00292926   .00289007
{txt} r9 {res} -.13914005  -.01044934   -.0044874   .02284917   .00222476  -.00287441  -.01024836  -.00933268
{txt}r10 {res}  .15118729   .01134675   .01259019   .12310726   .01198467   .01313469    .0131418   .01296423
{txt}r11 {res}  3.7999048   .28537086   .21960238   3.6839779   .35869908   .27427087   .13854686   .15143034
{txt}r12 {res}  2.1290878   .15993005   .18443813   1.8608867     .181574    .1921059    .1876187   .18671906
{txt}r13 {res}  .04512467   .00338884   .00937169   .14082851    .0137121   .00521258   .00509713   .00577655
{txt}r14 {res}  .27933208   .02098447   .02383112   .23683329   .02307879   .02488564   .02449008    .0240694
{txt}r15 {res}  .65576389           .   .55715522   .55679624           .   .51747994   .49761029   .51503484
{reset}
{com}. 
. * Summary Statistics
. foreach y in "" "Win" "Loss" {c -(}
{txt}  2{com}.         foreach x in GameRate SeasonRate GameANYA SeasonANYA GameTANYA SeasonTANYA GameFPA SeasonFPA NonQBFantPt Home RestDays logIM SGini SNSRatio {c -(}
{txt}  3{com}.                 quietly sum `x' if "`y'" == ""
{txt}  4{com}.                 else if "`y'" != "" {c -(}
{txt}  5{com}.                         quietly sum `x' if `y' == 1
{txt}  6{com}.                 {c )-}
{txt}  7{com}.                 quietly scalar Mean`x'`y' = r(mean)
{txt}  8{com}.                 quietly scalar SD`x'`y' = r(sd)
{txt}  9{com}.                 quietly scalar Min`x'`y' = r(min)
{txt} 10{com}.                 quietly scalar Max`x'`y' = r(max)
{txt} 11{com}.         {c )-}
{txt} 12{com}. {c )-}
{txt}
{com}. 
. matrix Summary = J(42,4,.)
{txt}
{com}. local CountX = 0
{txt}
{com}. foreach x in "" "Win" "Loss" {c -(}
{txt}  2{com}.         quietly local CountY = 1
{txt}  3{com}.         foreach y in "Mean" "SD" "Min" "Max" {c -(}
{txt}  4{com}.                 quietly local CountZ = 0
{txt}  5{com}.                 foreach z in "Rate" "ANYA" "TANYA" "FPA" {c -(}
{txt}  6{com}.                         quietly matrix Summary[`CountZ'*2+1+`CountX'*14,`CountY'] = `y'Game`z'`x'
{txt}  7{com}.                         quietly matrix Summary[`CountZ'*2+2+`CountX'*14,`CountY'] = `y'Season`z'`x'
{txt}  8{com}.                         quietly local CountZ = `CountZ'+1
{txt}  9{com}.                 {c )-}
{txt} 10{com}.                 quietly matrix Summary[9+`CountX'*14,`CountY'] = `y'NonQBFantPt`x'
{txt} 11{com}.                 quietly matrix Summary[10+`CountX'*14,`CountY'] = `y'Home`x'
{txt} 12{com}.                 quietly matrix Summary[11+`CountX'*14,`CountY'] = `y'RestDays`x'
{txt} 13{com}.                 quietly matrix Summary[12+`CountX'*14,`CountY'] = `y'logIM`x'
{txt} 14{com}.                 quietly matrix Summary[13+`CountX'*14,`CountY'] = `y'SGini`x'
{txt} 15{com}.                 quietly matrix Summary[14+`CountX'*14,`CountY'] = `y'SNSRatio`x'
{txt} 16{com}.                 quietly local CountY = `CountY'+1
{txt} 17{com}.         {c )-}
{txt} 18{com}.         quietly local CountX = `CountX'+1
{txt} 19{com}. {c )-}
{txt}
{com}. matrix list Summary
{res}
{txt}Summary[42,4]
             c1          c2          c3          c4
 r1 {res}  90.552543   25.937876           0   158.33333
{txt} r2 {res}  90.108136   12.306812   30.684158   128.75555
{txt} r3 {res}  6.2808349   2.8142402  -6.4000001   19.608696
{txt} r4 {res}  6.1661209   1.2552436       -.375   10.153846
{txt} r5 {res}  5.8955008   2.6163424    -10.8125   16.956522
{txt} r6 {res}  5.8168547   1.1901781        -.56    9.034483
{txt} r7 {res}  .43752577   .20865721  -.47833332   1.4314286
{txt} r8 {res}  .43113429   .09442714  -.05407408   .72041595
{txt} r9 {res}  67.511832   17.280836           4       155.2
{txt}r10 {res}         .5   .50004312           0           1
{txt}r11 {res}  6.9912039   2.8665491           3          17
{txt}r12 {res}  16.639394   .75359451   11.338834   18.372927
{txt}r13 {res}  .48065328   .05895273   .25448316   .69520438
{txt}r14 {res}  1.2269315   .49638406   .13767274   3.8986552
{txt}r15 {res}   102.6886   23.632578   2.7777779   158.33333
{txt}r16 {res}  93.426768   11.276031       31.25   128.75555
{txt}r17 {res}  7.6136035   2.6138422  -3.4117646   19.608696
{txt}r18 {res}  6.5148786   1.1352682   .75609756   10.153846
{txt}r19 {res}   7.084715   2.3679762  -1.1904762   16.956522
{txt}r20 {res}  6.1331946   1.0627706   .83582091    9.034483
{txt}r21 {res}  .52325776    .2079844        .032   1.4314286
{txt}r22 {res}  .45419179   .08974236   .06571428   .72041595
{txt}r23 {res}  74.995343   15.450591           4       155.2
{txt}r24 {res}  .54674026   .49789644           0           1
{txt}r25 {res}  7.0303553   2.9042298           3          17
{txt}r26 {res}  16.596805    .7478043   11.338834   18.351299
{txt}r27 {res}  .47854404   .05890922   .28719735   .69520438
{txt}r28 {res}  1.2584129   .49443165   .21107997    3.852031
{txt}r29 {res}  78.416486   22.194839           0   148.35858
{txt}r30 {res}  86.789503   12.400984   30.684158   122.46016
{txt}r31 {res}  4.9480663   2.3359553  -6.4000001      13.125
{txt}r32 {res}  5.8173633   1.2726488       -.375   9.3940525
{txt}r33 {res}  4.7062867   2.2926205    -10.8125   14.222222
{txt}r34 {res}  5.5005148   1.2263133        -.56   8.9816055
{txt}r35 {res}  .35179378   .17066973  -.47833332   1.1933334
{txt}r36 {res}   .4080768   .09337394  -.05407408   .72041595
{txt}r37 {res}   60.02832    15.70326           6       122.3
{txt}r38 {res}  .45325974   .49789644           0           1
{txt}r39 {res}  6.9520524   2.8283256           3          17
{txt}r40 {res}  16.681984   .75707664    13.25602   18.372927
{txt}r41 {res}  .48276251    .0589309   .25448316    .6817252
{txt}r42 {res}  1.1954502   .49642099   .13767274   3.8986552
{reset}
{com}. 
. * Count effective number of observations and FEs
. gen Ones = 1
{txt}
{com}. egen CountPlayer = sum(Ones), by(FE Player)
{txt}
{com}. egen CountFE = sum(Ones), by(FE)
{txt}
{com}. gen Change = 0
{txt}
{com}. replace Change = 1 if CountPlayer < CountFE
{txt}(3,059 real changes made)

{com}. 
. gen Time = 1
{txt}
{com}. local NObs = _N
{txt}
{com}. forvalues i = 2/`NObs'{c -(}
{txt}  2{com}.         quietly replace Time in `i' = Time[`i'-1]+1 if FE[`i'-1] == FE[`i']
{txt}  3{com}.         quietly replace Time in `i' = 1 if FE[`i'-1] != FE[`i']
{txt}  4{com}. {c )-}
{txt}
{com}. 
. count if Change == 1
  {res}3,059
{txt}
{com}. local Num = r(N)
{txt}
{com}. count
  {res}5,798
{txt}
{com}. local Denom = r(N)
{txt}
{com}. disp `Num'/`Denom'*100
{res}52.759572
{txt}
{com}. 
. count if Change == 1 & Time == 1
  {res}219
{txt}
{com}. local Num = r(N)
{txt}
{com}. count if Time == 1
  {res}432
{txt}
{com}. local Denom = r(N)
{txt}
{com}. disp `Num'/`Denom'*100
{res}50.694444
{txt}
{com}. 
. export delimited Home GameMERate SeasonMERate GameMEANYA SeasonMEANYA GameMETANYA SeasonMETANYA GameMEFPA SeasonMEFPA using "C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Game Analysis/2 ME Histograms Vet.csv", replace
{res}{txt}file {bf:C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Game Analysis/2 ME Histograms Vet.csv} saved

{com}. scalar t2 = c(current_time)
{txt}
{com}. gen Runtime = cond(clock(t2,"hms")>=clock(t1,"hms"), (clock(t2,"hms")-clock(t1,"hms"))/60000, (clock(t2,"hms")+24*60*60*1000-clock(t1,"hms"))/60000)
{txt}
{com}. disp Runtime " minutes"
{res}4.8666668 minutes
{txt}
{com}. save "C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Season Analysis/Data 13 AME Vet.dta", replace
{txt}{p 0 4 2}
file {bf}
C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Season Analysis/Data 13 AME Vet.dta{rm}
saved
{p_end}

{com}. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}C:/Users/Owner/OneDrive/Documents/Georgetown University/Thesis Writer/Research/QB Worth/Game Analysis/Do 13 Game Analysis Vet.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}24 Aug 2025, 14:03:39
{txt}{.-}
{smcl}
{txt}{sf}{ul off}